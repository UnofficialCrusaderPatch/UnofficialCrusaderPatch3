name: Build

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - feature-testing
  # Also trigger on page_build, as well as release created events
  page_build:
  release:
    types: # This configuration does not affect the page_build event above
      - created

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .
  VERSION_MAJOR: 3
  VERSION_MINOR: 0
  VERSION_PATCH: 0

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        build_configuration: [Debug, Release, DebugSecure, ReleaseSecure]
    env:
        BUILD_CONFIGURATION: ${{ matrix.build_configuration }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Add NuGet source
      working-directory: ${{env.GITHUB_WORKSPACE}}
      env:
        UCP3_READ_PACKAGES: ${{ secrets.UCP3_READ_PACKAGES }}
      run: nuget sources add -Name "gynt-packages" -Source "https://nuget.pkg.github.com/gynt/index.json" -StorePasswordInClearText -Username git -Password "$env:UCP3_READ_PACKAGES"

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore
      
    - name: Prepare UCP3 package folder structure
      shell: pwsh
      run: |
        # Create the right folders
        mkdir "$env:BUILD_CONFIGURATION\ucp-package"
        mkdir "$env:BUILD_CONFIGURATION\ucp-package\ucp"    
      
    - name: Prepare UCP3 package extensions
      shell: pwsh
      run: |
        # Copy all content/ucp files ucp-package/ucp, except the modules folder
        $mainfiles = Get-ChildItem content\ucp | Where({$_.Name -ne "modules"})  | foreach{$_.FullName}
        Copy-Item $mainfiles -Destination "$env:BUILD_CONFIGURATION\ucp-package\ucp" -Recurse
        
        ### Build each module if required, and then package the module by copying the right files
        # List of modules
        $modules = Get-ChildItem -Directory content\ucp\modules
        foreach($module in $modules) {
          
          # Create the module directory in the ucp-package\ucp\modules folder
          New-Item -Path "$env:BUILD_CONFIGURATION\ucp-package\ucp\modules\" -Name $module.Name -ItemType "directory"
          $moduleDir = "$env:BUILD_CONFIGURATION\ucp-package\ucp\modules\" + $module.Name + "\"
          
          # If the module uses C++ we have to build it first
          $hasSLN = Get-ChildItem -Recurse -Path ($module.FullName + "\*.sln")
          
          # If the module specifies a custom list of files to include, read that
          $hasFilesList = Test-Path -Path ($module.FullName + "\files.xml")
          
          # Modules that should be compiled do not inherit the Secure build configurations for now
          $simpleBuildConfiguration=$env:BUILD_CONFIGURATION
          if($env:BUILD_CONFIGURATION -eq "DebugSecure") {
            $simpleBuildConfiguration="Debug"
          }
          if($env:BUILD_CONFIGURATION -eq "ReleaseSecure") {
            $simpleBuildConfiguration="Release"
          }
          
          # Build the module
          if($hasSLN) {
            pushd $hasSLN.Directory.FullName
            nuget restore
            msbuild /m /p:Configuration=$simpleBuildConfiguration
            popd
          }
          
          # Copy the specified files, or *.lua and definition.yml if no module.files file was found.
          if($hasFilesList) {
            $defaultFilesNode = Select-Xml -XPath "/module/files[not(@build)]" -Path ($module.FullName + "\files.xml")
            $buildFilesNode = Select-Xml -XPath "/module/files[@build='$simpleBuildConfiguration']" -Path ($module.FullName + "\files.xml")
            
            $node = $null
            if($buildFilesNode) {
              $node = $buildFilesNode
            } elseif ($defaultFilesNode) {
              $node = $defaultFilesNode
            } else {
              Throw "Invalid files.xml in module: " + $moduleDir
            }
            
            $moduleFiles = $node.Node.file
            foreach($moduleFile in $moduleFiles) {
              # To allow specification of $(Configuration) in "src" in module.files, we substitute it with the right value here
              $srcFile = $moduleFile.src.Replace("`$(Configuration)", "$simpleBuildConfiguration")
              
              $t = $null
              if($moduleFile.target -eq $null) {
                $t = "."
              } else {
                $t = $moduleFile.target
              }
              
              # Copy the file, can include wildcards
              Copy-Item ($module.FullName + "\" + $srcFile) -Destination ($moduleDir + "\" + $t + "\") -Recurse
            }
          } else {
            # TODO: avoid this wildcard. Include .lua .yml and ... only?
            Copy-Item ($module.FullName + "\*") -Destination $moduleDir -Recurse
          }
        }
        
    - name: Copy over FASM dll
      shell: pwsh
      run: |
        Copy-Item "dll\vendor\fasm\source\dll\fasm.dll" -Destination "$env:BUILD_CONFIGURATION\ucp-package\ucp\code\vendor\fasm\fasm.dll"
        Copy-Item "dll\vendor\fasm\LICENSE.txt" -Destination "$env:BUILD_CONFIGURATION\ucp-package\ucp\code\vendor\fasm\LICENSE.txt"
        
    - name: Generate zip file of the package for secure versions
      shell: pwsh
      run: |
        if(($env:BUILD_CONFIGURATION -eq "DebugSecure") -or ($env:BUILD_CONFIGURATION -eq "ReleaseSecure")) {
          pushd "$env:BUILD_CONFIGURATION\ucp-package\"
          # Zip all files and remove the original to avoid packing twice
          7z a -tzip -m0=Copy ..\..\internaldata.zip ucp -x"!ucp/plugins" -sdel
          popd
        } else {
        }
        
    - name: Build UCP3
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: |
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Prepare UCP3 package dll files and cfg file
      shell: pwsh
      run: |
        # Copy the dll files, rename binkw32.dll to binkw32_ucp.dll
        $dllfiles = Get-ChildItem $env:BUILD_CONFIGURATION\*.dll
        Copy-Item $dllfiles -Destination "$env:BUILD_CONFIGURATION\ucp-package\" -Recurse
        
        # binkw32.dll is in the Release or Debug folder.
        if($env:BUILD_CONFIGURATION -eq "DebugSecure") {
          $binkw32dir = "Debug"
        } elseif($env:BUILD_CONFIGURATION -eq "ReleaseSecure") {
          $binkw32dir = "Release"
        } else {
          $binkw32dir = $env:BUILD_CONFIGURATION         
        }        
        Copy-Item "$binkw32dir\binkw32.dll" -Destination "$env:BUILD_CONFIGURATION\ucp-package\" -Recurse
        
        Rename-Item -Path "$env:BUILD_CONFIGURATION\ucp-package\binkw32.dll" -NewName "binkw32_ucp.dll"
        
        # Copy the bat file that renames binkw32_ucp.dll to binkw32.dll and backs up binkw32.dll to binkw32_real.dll (if necessary)
        Copy-Item installer\rename-dlls.bat "$env:BUILD_CONFIGURATION\ucp-package\install.bat"
        
        # Copy the legacy ucp.cfg
        Copy-Item installer\ucp.cfg "$env:BUILD_CONFIGURATION\ucp-package\ucp.cfg"
        
        mkdir "$env:BUILD_CONFIGURATION\ucp-package\gameseeds"

    - name: Generate a default config
      shell: pwsh
      run: |
        Install-Module powershell-yaml -Scope CurrentUser -Force
        Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
        Import-Module powershell-yaml
        
        # Function to convert a options.yml definition to a simplified ucp-config.yml style format
        function Convert-ConfigFile {
            param (
                [hashtable]$Table
            )
            if($Table.ContainsKey("default")) {
                # We reached a terminal node
                return $Table.default
            } else 
            {
                # We did not reach a terminal node, continue looking for terminals, collect them
                $nht = [ordered]@{}
                foreach($key in $Table.keys) {
                    if($Table[$key] -is [System.Collections.IDictionary]) {
                        # This might be a good terminal node candidate.
                        $nht[$key] = Convert-ConfigFile -Table $Table[$key]
                    } else 
                    {
                        $nht[$key] = $Table[$key]
                    }
                }
                return $nht
            }
        }
        
        $defaults = [ordered]@{"modules"=[ordered]@{};"plugins"=[ordered]@{}}
        
        $modules = Get-ChildItem -Directory content\ucp\modules
        
        foreach($module in $modules) {
            $i = Get-Content -Path ($module.FullName + "\definition.yml") -Raw
            $iy = ConvertFrom-Yaml $i
            
            $name = $iy.name
            $version = $iy.version
            
            $defaults.modules[$name] = [ordered]@{}
            $defaults.modules[$name].active = $false
            $defaults.modules[$name].version = $version
            
            if(Test-Path -Path ($module.FullName + "\options.yml")) {
                $defaults.modules[$name].options = [ordered]@{}
                
                $f = Get-Content -Path ($module.FullName + "\options.yml") -Raw
                $yus = ConvertFrom-Yaml $f
                
                if($yus -ne $null) {
                    # Create an ordered dictionary
                    $yk = $yus.keys | Sort
                    $y = [ordered]@{}
                    foreach($k in $yk) {
                        $y[$k] = $yus[$k]
                    }
                    
                    # Set the default values
                    $defaults.modules[$name].options = Convert-ConfigFile -Table $y           
                } 
            }
        }
        
        $plugins = Get-ChildItem -Directory content\ucp\plugins
        
        foreach($plugin in $plugins) {
            $i = Get-Content -Path ($plugin.FullName + "\definition.yml") -Raw
            $iy = ConvertFrom-Yaml $i
            
            $name = $iy.name
            $version = $iy.version
            $default_active = $iy.default
            if($default_active -eq $null) {
              $default_active = $false
            }
            
            $defaults.plugins[$name] = [ordered]@{}
            $defaults.plugins[$name].active = $default_active
            $defaults.plugins[$name].version = $version
            
            if(Test-Path -Path ($plugin.FullName + "\options.yml")) {
                $defaults.plugins[$name].options = [ordered]@{}
                
                $f = Get-Content -Path ($plugin.FullName + "\options.yml") -Raw
                $y = ConvertFrom-Yaml $f
                if($y -ne $null) {
                    $defaults.plugins[$name].options = Convert-ConfigFile -Table $y                
                }
            }
        }
        
        $o = ConvertTo-Yaml $defaults
        Set-Content -Path "$env:BUILD_CONFIGURATION\ucp-package\ucp-config-defaults.yml" -Value $o
    - name: Generate a UCP3 version file
      shell: pwsh
      run: |
        Import-Module powershell-yaml
        $versionInfo = [ordered]@{
            major = "$env:VERSION_MAJOR".ToInt32($null);
            minor = "$env:VERSION_MINOR".ToInt32($null);
            patch = "$env:VERSION_PATCH".ToInt32($null);
            sha = "$env:GITHUB_SHA";
            build = "$env:BUILD_CONFIGURATION";
        }
        $y = ConvertTo-Yaml $versionInfo
        Set-Content -Path "$env:BUILD_CONFIGURATION\ucp-package\ucp-version.yml" -Value $y
    - name: Generate a snapshot UCP3 artifact name
      shell: pwsh
      run: |
        $name = "$env:GITHUB_SHA".SubString(0, 10)
        $type = "$env:BUILD_CONFIGURATION" #.SubString(0, 1)
        if($env:BUILD_CONFIGURATION -eq "Debug") {
          $type = "DevDebug"
        }
        if($env:BUILD_CONFIGURATION -eq "DebugSecure") {
          $type = "Debug"
        }
        if($env:BUILD_CONFIGURATION -eq "Release") {
          $type = "DevRelease"
        }
        if($env:BUILD_CONFIGURATION -eq "ReleaseSecure") {
          $type = "Release"
        }
        echo "NAME=UCP3-snapshot-$type-$name" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - name: Upload UCP3 as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.NAME }}
        path: ${{ env.BUILD_CONFIGURATION }}/ucp-package/*
